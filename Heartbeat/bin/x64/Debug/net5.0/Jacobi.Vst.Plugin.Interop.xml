<?xml version="1.0"?>
<doc>
    <assembly>
        "Jacobi.Vst.Plugin.Interop"
    </assembly>
    <members>
        <member name="M:Jacobi.Vst.Interop.TimeCriticalScope.Dispose">
            <summary>
Restores the latency mode of the GC to its original value.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Interop.TimeCriticalScope.#ctor">
            <summary>
Constructs a new instance and sets the latence mode of the GC.
</summary>
        </member>
        <member name="T:Jacobi.Vst.Interop.TimeCriticalScope">
            <summary>
The TimeCriticalScope sets the Latency Mode of the GC to 'LowLatency' during the lifetime of the instance (scope).
</summary>
        </member>
        <member name="P:Jacobi.Vst.Plugin.Interop.HostCommandStub.Commands">
            <summary>
Access to the host commands. Can be null early in the initialization process.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandStub.UpdatePluginInfo(Jacobi.Vst.Core.Plugin.VstPluginInfo)">
            <summary>
Updates the unmanaged <b>Vst2Plugin</b> structure with the new values in the <paramref name="pluginInfo" />.
</summary>
            <param name="pluginInfo">Must not be null.</param>
            <remarks>When AudioInputCount, AudioOutputCount or InitialDelay have changed the IoChanged() method is called automatically.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandStub.Finalize">
            <summary>
Disposes the unmanaged resources.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandStub.Dispose">
            <summary>
Disposes the managed resources and calls the finalizer.
</summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Interop.HostCommandStub">
            <summary>
The HostCommandStub calls the host callback function.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.PluginCommandProxy.DispatchLegacy(Vst2PluginCommands,System.Int32,System.Int64,System.Void*,System.Single)">
            <summary>
Dispatches the opcode to one of the Plugin legacy methods.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.PluginCommandProxy.ProcessAcc(System.Single**,System.Single**,System.Int32,System.Int32,System.Int32)">
            <summary>
Calls the plugin for 32 bit accumulating audio processing (legacy).
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.PluginCommandProxy.GetParameter(System.Int32)">
            <summary>
Calls the plugin to retrieve a parameter value.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.PluginCommandProxy.SetParameter(System.Int32,System.Single)">
            <summary>
Calls the plugin to assign a new value to a parameter.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.PluginCommandProxy.Process(System.Double**,System.Double**,System.Int32,System.Int32,System.Int32)">
            <summary>
Calls the plugin for 64 bit audio processing.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.PluginCommandProxy.Process(System.Single**,System.Single**,System.Int32,System.Int32,System.Int32)">
            <summary>
Calls the plugin for 32 bit audio processing.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.PluginCommandProxy.Dispatch(System.Int32,System.Int32,System.Int64,System.Void*,System.Single)">
            <summary>
Dispatches the opcode to one of the Plugin methods.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.PluginCommandProxy.#ctor(Jacobi.Vst.Core.Plugin.IVstPluginCommandStub)">
            <summary>
Constructs a new instance that calls the <paramref name="cmdStub" />.
</summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Interop.PluginCommandProxy">
            <summary>
The PluginCommandProxy dispatches calls to the Plugin.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Interop.MemoryTracker.ClearAll">
            <summary>
Deletes all 'pointers' tracked.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Interop.MemoryTracker.RegisterArray(System.Void*)">
            <summary>
Registers an <paramref name="arrayObject" /> that is an array.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Interop.MemoryTracker.RegisterObject(System.Void*)">
            <summary>
Registers a <paramref name="memoryObject" /> that is not an array.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Interop.MemoryTracker.#ctor">
            <summary>
Constructs a new instance.
</summary>
        </member>
        <member name="T:Jacobi.Vst.Interop.MemoryTracker">
            <summary>
The MemoryTracker class maintains a list of native allocated objects that can be deleted (freed) at another time.
</summary>
            <remarks>Is a managed class because it is used as a member of a managed class.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetInputSpeakerArrangement">
            <summary>
Gets the input speaker arrangement.
</summary>
            <returns>Returns the speaker arrangement.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetChunkFile">
            <summary>
Gets the native path of currently loading bank or project.
</summary>
            <returns>Return the file path to the chunk file.</returns>
            <remarks>Call from within GetChunk.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.EditFile(System.String)">
            <summary>
Opens an audio editor window; defined by <paramref name="xml" />.
</summary>
            <param name="xml">Must not be null or empty.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.CloseWindow(System.IntPtr)">
            <summary>
Closes a window previously opened by <see cref="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.OpenWindow" />.
</summary>
            <param name="wnd">The window handle.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.OpenWindow">
            <summary>
Opens a new host window.
</summary>
            <returns>Returns the Win32 HWND window handle.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.SetIcon(System.IntPtr)">
            <summary>
Provides the host with an icon representation of the plugin.
</summary>
            <param name="icon">Passes the icon Handle to the Host. Must not be null.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetOutputSpeakerArrangement">
            <summary>
Gets the output speaker arrangement.
</summary>
            <returns>Returns the speaker arrangement.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.SetOutputSampleRate(System.Single)">
            <summary>
For variable IO. Sets the output sample rate.
</summary>
            <param name="sampleRate">The sample rate.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.WillReplaceOrAccumulate">
            <summary>
Returns an indication how the Host processes audio.
</summary>
            <returns>Returns 0=Not Supported, 1=Replace, 2=Accumulate.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetNextPlugin(System.Int32)">
            <summary>
Retrieves the next Plugin based on the specified <paramref name="pinIndex" />.
</summary>
            <param name="pinIndex">A zero-based pin index. Specify -1 for next.</param>
            <returns>Return System.IntPtr.Zero when unsuccessful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetPreviousPlugin(System.Int32)">
            <summary>
Retrieves the previous Plugin based on the specified <paramref name="pinIndex" />.
</summary>
            <param name="pinIndex">A zero-based pin index. Specify -1 for next.</param>
            <returns>Return System.IntPtr.Zero when unsuccessful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.NeedIdle">
            <summary>
Indicates to the host that the Plugin needs idle calls (outside its editor window).
</summary>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetParameterQuantization(System.Int32)">
            <summary>
Returns the integer value for +1.0 representation,
or 1 if full single float precision is maintained in automation.
</summary>
            <param name="parameterIndex">A zero-based index into the parmeter collection or -1 for all/any.</param>
            <returns>Returns the integer value for +1.0 representation, or 1 if full single float precision is maintained in automation.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetAutomatableParameterCount">
            <summary>
Returns the number of parameters that support automation.
</summary>
            <returns>Returns the number of parameters that support automation.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetTempoAt(System.Int32)">
            <summary>
Retrieves the tempo at specified <paramref name="sampleIndex" /> location.
</summary>
            <param name="sampleIndex">A zero-based sample index.</param>
            <returns>Returns the tempo in bmp * 10000.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.SetTime(Jacobi.Vst.Core.VstTimeInfo,Jacobi.Vst.Core.VstTimeInfoFlags)">
            <summary>
Sets a new time for the Host.
</summary>
            <param name="timeInfo">Must not be null.</param>
            <param name="filterFlags">Unclear what the purpose is for these flags.</param>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.WantMidi">
            <summary>
Indicates to the Host that the Plugin wants to process Midi events.
</summary>
            <returns>Returns True when the call was successful.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.PinConnected(System.Int32,System.Boolean)">
            <summary>
Reports whether the spefied pin at the <paramref name="connectionIndex" /> is connected.
</summary>
            <param name="connectionIndex">A zero-based index of the connection pin.</param>
            <param name="output">Report in output pins when True, otherwise (False) report on input pins.</param>
            <returns>Returns True when the pin is connected, otherwise False is returned.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.CloseFileSelector(Jacobi.Vst.Core.VstFileSelect)">
            <summary>
Cleans up the unmanaged resources consumed by a call to <see cref="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)" />.
</summary>
            <param name="fileSelect">The exact same instance that was also passed to <see cref="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)" />.</param>
            <returns>Returns true if supported by the host.</returns>
            <remarks>This method must always be called when <see cref="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)" /> returned true. 
Otherwise unmanaged memory will leak.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.OpenFileSelector(Jacobi.Vst.Core.VstFileSelect)">
            <summary>
Opens the file selector in the host.
</summary>
            <param name="fileSelect">A structure describing the options and settings.</param>
            <returns>Returns true if supported by the host.</returns>
            <remarks>On return (if true) the selected paths are filled in <paramref name="fileSelect" />.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.EndEdit(System.Int32)">
            <summary>
Notifies the host that the parameter at <paramref name="index" /> was edited.
</summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.BeginEdit(System.Int32)">
            <summary>
Notifies the host that the parameter at <paramref name="index" /> is about to be edited.
</summary>
            <param name="index">A zero-based index into the parameter collection.</param>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.UpdateDisplay">
            <summary>
Request the host to update its display.
</summary>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetDirectory">
            <summary>
Retieves the base directory for the plugin.
</summary>
            <returns>Returns a rooted path.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetLanguage">
            <summary>
Retrieves the localized langauge of the host.
</summary>
            <returns>Returns an value indicating the host UI language.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.CanDo(System.String)">
            <summary>
Queries the host for specific support.
</summary>
            <param name="cando">A host capability.</param>
            <returns>Returns <see cref="T:Jacobi.Vst.Core.VstCanDoResult" /><b>.Yes</b> if the host supports the capability.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetVendorVersion">
            <summary>
Retrieves the host version.
</summary>
            <returns>Never returns 0 (zero).</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetProductString">
            <summary>
Retrieves the host product infotmation.
</summary>
            <returns>Never returns null?</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetVendorString">
            <summary>
Retrieves the host vendor string.
</summary>
            <returns>Never returns null?</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetAutomationState">
            <summary>
Retrieves the level of automation supported by the host.
</summary>
            <returns>Returns a value indicating the automation level.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetProcessLevel">
            <summary>
Returns an indication of what Host Thread is currently calling into the plugin.
</summary>
            <returns>Returns a thread identifier.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetOutputLatency">
            <summary>
Retrieves the latency concerning audio output.
</summary>
            <returns>Returns the latency in number of samples?</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetInputLatency">
            <summary>
Retrieves the latency concerning audio input.
</summary>
            <returns>Returns the latency in number of samples?</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetBlockSize">
            <summary>
Retrieves the number of samples passed to the plugin during the audio processing cycles.
</summary>
            <returns>Returns the number of samples.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetSampleRate">
            <summary>
Retrieves the current sample rate from the host.
</summary>
            <returns>Returns the number of samples per second.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.SizeWindow(System.Int32,System.Int32)">
            <summary>
Sizes the Host window to the specified dimensions.
</summary>
            <param name="width">Width of the window in pixels.</param>
            <param name="height">Height of the window in pixels.</param>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.IoChanged">
            <summary>
Notifies the host that the plugin IO has changed.
</summary>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.ProcessEvents(Jacobi.Vst.Core.VstEvent[])">
            <summary>
Requests the host to process the <paramref name="events" />.
</summary>
            <param name="events">Must not be null.</param>
            <returns>Returns true if supported by the host.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetTimeInfo(Jacobi.Vst.Core.VstTimeInfoFlags)">
            <summary>
Retrieves time info in a specific format.
</summary>
            <param name="filterFlags">Indicates the preferred time information format.</param>
            <returns>Returns time information but not necessarilly in the format specified by <paramref name="filterFlags" />.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.ProcessIdle">
            <summary>
Yield execution control to the host.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetCurrentPluginID">
            <summary>
Retrieves the unique plugin ID of the current plugin.
</summary>
            <returns>Returns the Four Character Code as an integer.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.GetVersion">
            <summary>
Retrieves the version number of the host.
</summary>
            <returns>Usually the version number is in thousends. For example 1100 means version 1.1.0.0.</returns>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.SetParameterAutomated(System.Int32,System.Single)">
            <summary>
Notifies the Host that the value of the parameter at <paramref name="index" /> has a new <paramref name="value" />.
</summary>
            <param name="index">Must be greater than zero and smaller than the parameter count.</param>
            <param name="value">The new value assigned to the parameter.</param>
            <remarks>The plugin can call this method to allow the parameter value change to be automated by the host.</remarks>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.Finalize">
            <summary>
Disposes the unmanaged resources.
</summary>
        </member>
        <member name="M:Jacobi.Vst.Plugin.Interop.HostCommandsImpl.Dispose">
            <summary>
Disposes the managed resources and calls the finalizer.
</summary>
        </member>
        <member name="T:Jacobi.Vst.Plugin.Interop.HostCommandsImpl">
            <summary>
The HostCommandStub calls the host callback function.
</summary>
        </member>
        <member name="T:Bootstrapper">
            <summary>
The Bootstrapper class loads the managed plugin assembly.
</summary>
        </member>
    </members>
</doc>